generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- APPLICATION SCHEMA ---

model Category {
  id           String                @id(map: "categories_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  balance      Int?
  name         String
  order        Int?
  parentId     String?               @map("parent_id") @db.Uuid
  createdAt    DateTime              @default(now()) @map("created_at")
  updatedAt    DateTime              @default(now()) @map("updated_at")
  isSystem     Boolean               @default(false) @map("is_system")
  parent       Category?             @relation("categoriesTocategories", fields: [parentId], references: [id], onDelete: Cascade, map: "categories_parent_id_fk")
  children     Category[]            @relation("categoriesTocategories")
  transactions TransactionCategory[] @relation("categoriesTotransaction_categories")

  @@map("categories")
}

model FinancialAccount {
  id          String               @id(map: "financial_accounts_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description String
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @default(now()) @map("updated_at")
  accountType String               @default("account-types.other") @map("account_type")
  isSystem    Boolean              @default(false) @map("is_system")
  balance     Int                  @default(0)
  transaction TransactionAccount[] @relation("financial_accountsTotransaction_accounts")

  @@map("financial_accounts")
}

model TransactionAccount {
  id          String            @id(map: "transaction_accounts_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  accountId   String            @map("account_id") @db.Uuid
  recordId    String            @map("transaction_record_id") @db.Uuid
  amount      Int
  isCredit    Boolean           @default(false) @map("is_credit")
  status      String
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @default(now()) @map("updated_at")
  account     FinancialAccount  @relation("financial_accountsTotransaction_accounts", fields: [accountId], references: [id], onDelete: Cascade, map: "transaction_accounts_financial_account_id_fk")
  transaction TransactionRecord @relation("transaction_accountsTotransaction_records", fields: [recordId], references: [id], onDelete: Cascade, map: "transaction_accounts_transaction_record_id_fk")

  @@map("transaction_accounts")
}

model TransactionCategory {
  id          String            @id(map: "transaction_categories_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  recordId    String            @map("transaction_record_id") @db.Uuid
  notes       String?
  amount      Int
  isCredit    Boolean           @default(false) @map("is_credit")
  categoryId  String            @map("category_id") @db.Uuid
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @default(now()) @map("updated_at")
  category    Category          @relation("categoriesTotransaction_categories", fields: [categoryId], references: [id], onDelete: Cascade, map: "transaction_categories_category_id_fk")
  transaction TransactionRecord @relation("transaction_categoriesTotransaction_records", fields: [recordId], references: [id], onDelete: Cascade, map: "transaction_categories_transaction_record_id_fk")

  @@map("transaction_categories")
}

model TransactionRecord {
  id          String                @id(map: "transaction_records_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  date        DateTime              @db.Date
  order       Int                   @default(autoincrement())
  description String
  type        String
  templateId  String?               @map("template_id") @db.Uuid
  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime              @default(now()) @map("updated_at")
  accounts    TransactionAccount[]  @relation("transaction_accountsTotransaction_records")
  categories  TransactionCategory[] @relation("transaction_categoriesTotransaction_records")

  @@map("transaction_records")
}

// --- NEXT AUTH SCHEMA ---

model Account {
  id                       String  @id(map: "user_accounts_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId                   String  @map("user_id") @db.Uuid
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "user_accounts_user_id_fk")

  @@unique([provider, providerAccountId], map: "user_accounts_provider_account_id")
  @@map("user_accounts")
}

model Session {
  id           String   @id(map: "user_sessions_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sessionToken String   @unique(map: "user_sessions_session_token") @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "user_sessions_user_id_fk")

  @@map("user_sessions")
}

model VerificationToken {
  identifier String   @id(map: "user_verification_tokens_pk") @default(dbgenerated("uuid_generate_v4()")) @map("id") @db.Uuid
  token      String   @unique(map: "user_verification_tokens_token")
  expires    DateTime

  @@unique([identifier, token], map: "user_verification_tokens_id_token")
  @@map("user_verification_tokens")
}

model User {
  id            String    @id(map: "users_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String?
  email         String?   @unique(map: "users_email")
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

// --- IGNORED TABLES ---

model flyway_schema_history {
  installed_rank Int      @id(map: "flyway_schema_history_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "flyway_schema_history_s_idx")
  @@ignore()
}
